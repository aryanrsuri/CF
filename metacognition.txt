problem_id: 734A
date: 2025-05-15T21:41:31-0700
>>>
n games where A or D wins
loop through chars in the string and if A > D Anton A == D Friendship else Danik
n < 100_000 so can use a int
<<<
problem_id: 58A
date: 2025-05-15T21:41:31-0700
>>>
we want to remove chars such that hello is generated
first i len < 5 immediattley break
cnat we just check for more letters than just h e l l o ? 
oh wait we need h e l l o in the string AND more chars so we loop through chars w/ a freq list andwe get {a,1 ; h2; e1; l>2;o2; u} and since h e l l o exists AND more chars than that we are good to go
failed a test case and realized i did not read the problem and understand it throgouhly, I need to ensure its hello in order h > e > l > l > o
so assume its good (b=true) then if the order fails, break early and return NO else return YES
impement>iterate through the chars, and if
Greedily match "hello" eg can we find an h? yes e yes l yes l no BREAK or l yes o yes:wq
Bruh it was so simple. left to right pass on the string with a "hello" string i am indexing. Then I just matche hello[i] and if its the current char, i++. if i ==5 then I've reached end of hello and we've matched it
<<<
problem_id: 318A
date:2025-05-16T21:44:48-0700
>>>
rearrange natural numbers writes done asequence of all odd from 1, n and even from 1 to n 
in : n k
10 3 { 1, 3 , (5) ,7 9 2 4 6 8 }
first intuition: make this array and chose the k-1 index 
simpler: make two arrays one is even one is odd, if k > len odd check even if k < len odd check odd . Is this even faster?
Actually making two arrays is simpler so do that first
Worked but after i build the list (which I have to start at i), I minus k to get the actual index (since its counting by one). Then i check if k < size-1 of the array of odd if then i grba the k-th elem. else I decrement k by the size of the odd array and grab the k-th even elem.
Wait this isn't going to work for huge n's since mem limit exceeded. BUT half of the n is odd and half is even. So cant I just cut it in half o8 /4 = 4
8 4 : {1 3 5 7 2 4 6 8 } evens have n/2 odd and even
7 4 : {1 3 4 5 2 2 6 } odds have n//2+1 odd and n//2 even
8/2 = 4
so we can find the en and on, if index > on then substract en and find the new kth even number 

